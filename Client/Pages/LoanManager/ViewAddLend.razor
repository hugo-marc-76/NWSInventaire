@page "/AddLend"
@using NWSInventaire.Client.Toaster;
@using NWSInventaire.Shared.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject IJSRuntime _js
@inject NavigationManager _nav

<h3>CreateNewLend</h3>


@if(App.studentList != null)
{
    <div>
        <div class="row g-3">

            <div class="col-md-5">
                <select class="form-select" id="Student" required="" @onchange="SelectChangeStudent">
                    <option value="">étudiant</option>
                    @foreach (Student student in App.studentList)
                    {
                        <option value="@student.StudentId">@student.StudentFirstName @student.StudentLastName</option>
                    }
                </select>
            </div>

            <div class="col-md-5">
                <select class="form-select" id="Materiel" required="" @onchange="SelectChangeMaterial">
                    <option value="">Materiel</option>
                    @foreach (Material material in App.materialList.Where(x => x.studentId == null))
                    {
                        <option value="@material.MaterialId">@material.MaterialName - @App.materialCategorieList.FirstOrDefault(x => x.MaterialCategorieId == material.MaterialCategorieId).Name</option>
                    }
                </select>
            </div>

            <div class="col-md-3 col-lg-3 col-sm-6">
                <label for="startDate">Start</label>
                <input id="startDatePicker" class="form-control" type="date" @onchange="DateChangeStart" />
                <span id="startDateSelected"></span>
            </div>

            <div class="col-md-3 col-lg-3 col-sm-6">
                <label for="endDate">End</label>
                <input id="endDate" class="form-control" type="date" @onchange="DateChangeEnd" />
                <span id="endDateSelected"></span>
            </div>

        </div>

        <hr class="my-4">

        
        <button class="w-100 btn btn-primary btn-lg" @onclick="SendLendToApi">Continue to checkout</button>
    </div>
}


@code {

    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    private void LendIsAdd() => toasterService.AddToast(Toast.NewToast("Notification", "Le pret est enregistré", MessageColour.Success, 15));
    private void LendIsNotAdd() => toasterService.AddToast(Toast.NewToast("Notification", "Le pret n'a pas etait enregistré", MessageColour.Warning, 15));
    //private void StudentIsNotGet() => toasterService.AddToast(Toast.NewToast("Notification", "Les étudiant n'ont pas été charger", MessageColour.Danger, 15));
    private void NoMaterialInBDD() => toasterService.AddToast(Toast.NewToast("Notification", "Aucun Materiel Enregistré", MessageColour.Warning, 15));

    private void Error() => toasterService.AddToast(Toast.NewToast("Erreur", "Une erreur est survenue", MessageColour.Danger, 15));

    int StudentId = -1;
    DateTime StartLend;
    DateTime EndLend;
    Material materialFinal;

    protected override async void OnInitialized()
    {

        try
        {
            await App.GetAllStudent();

            var materialObject = await App.GetStringToApi("api/Material/GetAllMaterial");

            List<Material> materialList = JsonConvert.DeserializeObject<List<Material>>(materialObject.ToString());

            var materialCategorieObject = await App.GetStringToApi("api/MaterialCategorie/GetAllMaterialCategorie");

            List<MaterialCategorie>? materialCategorieList = JsonConvert.DeserializeObject<List<MaterialCategorie>>(materialCategorieObject.ToString());

            if (materialList.Count < 1)
                NoMaterialInBDD();
            //_nav.NavigateTo("/");

            if (materialList.Count > 0)
                App.materialList = materialList;

            if (materialCategorieList == null)
                Error();

            if (materialCategorieList.Count < 1)
                Error();

            if (materialCategorieList.Count > 0)
                App.materialCategorieList = materialCategorieList;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        var targetUrl = "Scripts/DatePickerScript.js";
        await _js.InvokeVoidAsync("loadJs", targetUrl);


    }

    public void SelectChangeStudent(ChangeEventArgs e)
    {
        if (e.Value == "")
        {
            StudentId = -1;
        }
        else
        {
            StudentId = Int32.Parse(e.Value.ToString());
        }
    }

    public void SelectChangeMaterial(ChangeEventArgs e)
    {
        if(e.Value == "")
        {
            materialFinal = null;
        }
        else
        {
            materialFinal = App.materialList.FirstOrDefault(x => x.MaterialId == Int32.Parse(e.Value.ToString()));
        }
    }

    public void DateChangeStart(ChangeEventArgs e)
    {
        StartLend = DateTime.Parse(e.Value.ToString());
    }

    public void DateChangeEnd(ChangeEventArgs e)
    {
        EndLend = DateTime.Parse(e.Value.ToString());
    }

    public async void SendLendToApi()
    {

        if (materialFinal != null && StudentId > -1 && StartLend != null && EndLend != null)
        {

            materialFinal.studentId = StudentId;
            materialFinal.StartLend = StartLend;
            materialFinal.EndLend = EndLend;

            var Result = await App.SendPostAsJsonToApi("api/Lend/AddLend", materialFinal);

            if (Result)
            {
                LendIsAdd();
                _nav.NavigateTo("/LendManager");
            }
            else
            {
                LendIsNotAdd();
            }
        }
        else
        {
            Error();
        }

    }


}