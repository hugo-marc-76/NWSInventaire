@page "/PutStudent/{studentId:int}";
@using NWSInventaire.Client.Toaster;
@using NWSInventaire.Shared.Models;
@using Newtonsoft.Json;
@inject HttpClient http

@if(student != null)
{
    <div class="form-signin w-100 m-auto">
        <div>

            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInput" placeholder="Prénom" @bind="student.StudentFirstName" @oninput="@((e) => { student.StudentFirstName = (string)e.Value; })">
                <label for="floatingInput">Prénom</label>
            </div>
            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInput" placeholder="Nom" @bind="student.StudentLastName" @oninput="@((e) => { student.StudentLastName = (string)e.Value; })">
                <label for="floatingInput">nom</label>
            </div>
            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInput" placeholder="Email" @bind="student.StudentMail" @oninput="@((e) => { student.StudentMail = (string)e.Value; })">
                <label for="floatingInput">Email</label>
            </div>

            <button class="w-100 btn btn-lg btn-primary" type="submit" @onclick="SendStudentToApi">Soumettre</button>
        </div>
    </div>
}

@code {

    [Parameter]
    public int studentId { get; set; }

    Student? student;



    protected async override void OnInitialized()
    {
        try
        {
            student = JsonConvert.DeserializeObject<Student>(await http.GetStringAsync("api/Student/GetStudent/" + studentId));

            if (student != null)
            {
                StateHasChanged();
            }


        }
        catch (Exception ex)
        {
            
        }

        base.OnInitialized();
    }



    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    private void StudentIsAdd() => toasterService.AddToast(Toast.NewToast("Notification", "L'étudiant a bien était ajouter", MessageColour.Success, 15));
    private void StudentIsNotAdd() => toasterService.AddToast(Toast.NewToast("Notification", "L'étudiant n'a pas était ajouter", MessageColour.Warning, 15));
    private void StudentIsSameAdd() => toasterService.AddToast(Toast.NewToast("Notification", "Aucune information differe du model actuel", MessageColour.Warning, 15));
    private void Error() => toasterService.AddToast(Toast.NewToast("Erreur", "Il manque des informations", MessageColour.Danger, 15));

    public async void SendStudentToApi()
    {

        Student CompareStudent = App.studentList.FirstOrDefault(x => x.StudentId == student.StudentId);

        if (student.StudentFirstName != "" && student.StudentLastName != "" && student.StudentMail != "")
        {
            if (student.StudentFirstName != CompareStudent.StudentFirstName || student.StudentLastName != CompareStudent.StudentLastName || student.StudentMail != CompareStudent.StudentMail)
            {
                var Result = await App.SendPutAsJsonToApi("api/Student/PutStudent", student);

                if (Result)
                {
                    StudentIsAdd();
                }
                else
                {
                    StudentIsNotAdd();
                }
            }
            else
            {
                StudentIsSameAdd();
            }

        }
        else
        {
            Error();
        }

    }

}
