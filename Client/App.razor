@using NWSInventaire.Client.Toaster
@using NWSInventaire.Shared.Models;
@using Newtonsoft.Json;
@using System.Net;
@inject HttpClient HttpCT
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<Toaster />

@code {
    public static HttpClient? http;

    public static List<Student>? studentList { get; set; }

    public static List<Material>? materialList { get; set; }

    public static List<MaterialCategorie>? materialCategorieList { get; set; }

    protected override void OnInitialized()
    {
        http = HttpCT;
        //GetAllStudent();
        base.OnInitializedAsync();
    }

    public static async Task<bool> GetAllStudent()
    {
        try
        {
            studentList = JsonConvert.DeserializeObject<List<Student>>(await http.GetStringAsync("api/Student/GetAllStudent"));

            if(studentList != null)
            {
                return true;
            }

            return false;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return false;
        }
    }

    public static async Task<object> GetStringToApi(string uri)
    {
        try
        {
            var result = await http.GetStringAsync(uri);

            if (result == null)
                return null;

            return result;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return null;
        }

    }

    public static async Task<bool> SendPostAsJsonToApi(string uri, object item)
    {
        try
        {
            var result = await http.PostAsJsonAsync(uri, item);

            if (result.StatusCode == HttpStatusCode.OK || result.StatusCode == HttpStatusCode.Accepted)
            {
                return true; 
            }

            return false;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return false;
        }

    }

    public static async Task<bool> SendPutAsJsonToApi(string uri, object item)
    {
        try
        {
            var result = await http.PutAsJsonAsync(uri, item);

            if (result.StatusCode == HttpStatusCode.OK)
            {
                return true;
            }

            return false;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return false;
        }

    }

}
